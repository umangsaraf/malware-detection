import json
import sys
from src.elt import *
from src.make_dataset import *
from src.build_features import *
from src.model import *



def main_func(**kwargs):
    name_path = kwargs['outpath']
    if name_path[0] == 'data':
        #To track all scraped xml files
        gz_list = []
        #Keep track of scraped apps
        scraped_apps = [] 
        #Keeps track of all apk_files
        apk_files = []
        # returns all links
        all_links = get_all_links() 


        i = 0
        np.random.seed(44)
        print('downloading APKs')
        pbar = tqdm(total = kwargs['total_links'])
        #runs till we collect the number of files needed
        while i < kwargs['total_links']: 
            #randomly choses a gz url
            gz_link = np.random.choice(all_links) 
            #checks if we have already scraped it 
            if gz_link not in gz_list: 
                #adds the gz url to scraped gz list
                gz_list.append(gz_link)  
                #Downoads the gz files and write is as an xml
                xml = get_xml(gz_link) 
                #grabs all the links to app's Apk's
                links = get_links_from_xml(xml) 
                j = 0
                while j < kwargs['Link_in_each_cat']:
                    #randomly choses a link to app's apk
                    apk_links = np.random.choice(links) 
                    #to check if we havent already scraped it 
                    if apk_links not in scraped_apps: 
                        #dowloads APK 
                        apk_file_name = create_apk(apk_links,name_path[0]) 
                        if apk_file_name == False:
                            break 
                        apk_files.append(apk_file_name)
                        scraped_apps.append(apk_links)  
                        i = i+1
                        j = j+1
                        pbar.update(1)

        pbar.close()
        print('output saved to /' + name_path[0]+ '/apk')
        print('decompiling APK files into smali code')
        #Decompile all Benign APK files into smali code
        for apk_ in tqdm(apk_files):
            get_smalli(name_path[0], apk_)
        print('output saved to /'+ name_path[0]+ '/smali')
    
          
    #Get paths of all Malware apps
    malware_path = malware_app_paths() 
    
    #get paths of all newly created benign apps    
    benign_paths = benign_app_paths(name_path[0]) 
    path = benign_paths + malware_path[:len(benign_paths)]
          
          
    #Clean all smali files and extract diffrent structures to construct the matrix 
    app_to_Api_dic,code_block_dic,library_dic = clean_data(path)
    
    
    save_structures(app_to_Api_dic,code_block_dic,library_dic,name_path )
    
    #get set of unique API's and list of all apps
    api_list, app_list = unique_api_apps(app_to_Api_dic)
    
    #Creates A matrix
    a = create_a_matrix(app_list, api_list, app_to_Api_dic)
    app_to_Api_dic = {}
    #creates B matrix
    b  = b_matrix(code_block_dic, api_list)
    code_block_dic = {}
    #Creates P matrix
    p = p_matrix(library_dic, api_list)
    #decache structure from memory 
    library_dic = {}
    
    
    scores_dic = {}

    #Initilaze our linear SVC model
    clf = LinearSVC(max_iter = 10000)
    
    #loop through all the diffrent kernels
    kernel_list = ['A.A^T','A.B.A^T', 'A.P.A^T','A.B.P.A^T']
    
    for i,kernel in enumerate(kernel_list):
        if i == 0:
            kernel_product = aa_kernel(a)
        elif i ==1:
            kernel_product = ab_kernel(a,b)
        elif i == 2:
            kernel_product = ap_kernel(a,p)
        else:
            kernel_product = abp_kernel(a,b,p)
          
        df = create_df(kernel_product,malware_path, benign_paths, app_list)
        scores_dic[kernel] = run_model(df, clf)
        print('for kernel '+ kernel + ' accuracy')
        print(scores_dic[kernel])
    scores_df = pd.DataFrame(scores_dic)
    scores_df = scores_df.T
    print('saving accuray of model to results/'+ name_path[4])
    #save it as a CSV 
    result_path = 'results/'
    if not os.path.isdir(result_path):
        os.mkdir(result_path)
    scrores_path = result_path + '/'+ name_path[4]
    scores_df.to_csv(scrores_path)
    
if __name__=='__main__':
    warnings.filterwarnings("ignore")
    if sys.argv[1] == 'test-set':
        with open('config/test-params.json') as file:
            cfg = json.load(file)
    else: 
        with open('config/params.json') as file:
            cfg = json.load(file)
        
    main_func(**cfg)


