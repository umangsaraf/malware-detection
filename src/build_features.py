import re
from collections import defaultdict
import time

import os 
import glob
from pathlib import Path
from tqdm import tqdm
import numpy as np
from scipy.sparse import *
import pandas as pd
import json




def unique_api_apps(final_dic):
    """
    Gets all names of apps and unique API's
    """
    api_list = []
    app_list = []
    for i in final_dic.keys():
        api_ = [api['name'] for api in final_dic[i]]
        api_list.append(api_)
        app_list.append(i)
    api_list = sum(api_list, [])
    api_list = list(set(api_list))
    return api_list, app_list


def create_a_matrix(app_list,api_list,final_dic):
    """
    Creates A matrx of size NxM, where N is number of apps and M is list of unique API's
    """
    print('Creating A matrix')
    start = time.time()
    #initialize lil_matrix
    a = lil_matrix((len(app_list),len(api_list)))
    to_add = 0
    for x,i in enumerate(app_list):
        api_name = set([api['name'] for api in final_dic[i]])
        for count,l in enumerate(api_list):
            if l in api_name:
                #add edge
                a[x, count] = 1 
    end = time.time()
    print('time taken to create A matrix = '+ str(end - start))
    return csr_matrix(a)

def b_matrix(new_strorage_dic,api_list):
    """
    Creates a matrix of size MxM where M is the list unique API's
    """
    print('Creating B matrix')
    start = time.time()
    b = lil_matrix(((len(api_list)),len(api_list)))
    index_dic = defaultdict(int)
    for x,i in enumerate(api_list):
        index_dic[i] = x

    for x,api in enumerate(new_strorage_dic.keys()):
       
        if len(new_strorage_dic[api]) != 0:
            for api_2 in new_strorage_dic[api]:

                index_1 = index_dic[api]
                index_2 = index_dic[api_2]
                b[index_1, index_2] = 1
                b[index_2, index_1] = 1
    b = csr_matrix(b)
    end = time.time()
    print('time taken to create B matrix = '+ str(end - start))
    return b

def p_matrix(library_dic, api_list):
    """
    Creates a matrix of size MxM where M is the list unique API's
    """
    print('Creating P matrix')
    start = time.time()
    p = lil_matrix(((len(api_list)),len(api_list)))
    index_dic = defaultdict(int)
    for x,i in enumerate(api_list):
        index_dic[i] = x
    library_list = [re.findall('\S+;->', i)[0][:-3] for i in api_list ]
    for x,lib in enumerate(library_list):
        api_list_new = library_dic[lib]
        for api_2 in api_list_new:
            index_2 = index_dic[api_2]
            p[x, index_2] = 1
            p[index_2, x] = 1
    p = csr_matrix(p)
    end = time.time()
    print('time taken to create P matrix = '+ str(end - start))
    return p





