import re
from collections import defaultdict
import time
import os 
import glob
from pathlib import Path
from tqdm import tqdm
import numpy as np
import json





def malware_app_paths():
    """
    Gets the path to all malware apps in the dataset directory 
    
    """
    malware_loc = []
    dir_list = os.listdir("/datasets/dsc180a-wi20-public/Malware/amd_data_smali")
    for i in dir_list:
        string = '/datasets/dsc180a-wi20-public/Malware/amd_data_smali/' + i
        lis = os.listdir(string)
        for variety in lis:
            new_string = string + '/' + variety
            app_list = os.listdir(new_string)
            for app in app_list:
                final_str = new_string + '/' + app
                malware_loc.append(final_str)
    return malware_loc

def benign_app_paths(outpath):
    """
    Gets paths to all benign apps in the dataset
    """

    path = outpath + "/smali"
    apps_name_list = os.listdir(path)
    apps_name_list = [i for i in apps_name_list if i.split('.')[-1] != 'apk']
    path_app = [outpath+'/smali/' + i for i in apps_name_list]
    
    return path_app

def clean_data(path):
    """
    Cleans all smali files in the dataset and then create 3 diffent datastructures 
    final_dic_ - Keeps track of apps to api
    new_storage_dic - keeps tracks of all api's in same code block
    library_dic - keeps track of all api's with same library 
    """
    
    final_dic_ = {}
    new_strorage_dic = defaultdict(list)
    library_dic = defaultdict(list)
    for x,path in enumerate(tqdm(path)):
        start = time.time()
        
        app_name_  = path.split('/')[-1]
        pathlist = Path(path).glob('**/*.smali')
        smalli_lis = [i for i in pathlist] # adds all smalli files name to the list 
        if len(smalli_lis) < 2:
            continue
        temp_list = []
        block_dic = defaultdict(set)
        counter = 0
        temp = 1
        for i in smalli_lis:
            with open(i) as FileObj:
                in_method = False
                for lines in FileObj:
                    if '.end method' in lines:
                        in_method = False
                        counter += 1
                    elif '.method' in lines:
                        in_method = True
                        counter += 1
                    elif in_method:
                        if temp != counter:
                            api_list = list(block_dic[temp])
                            for tracker, api_1 in enumerate(api_list):
                                for api_2 in api_list[tracker:]:
                                    if api_1 not in new_strorage_dic[api_2] and api_2 not in new_strorage_dic[api_1]:
                                        new_strorage_dic[api_1].append(api_2)
                            
                        temp = counter
                        dic = {}
                       
                        invoke_list = re.findall('invoke\-\S+', lines)
                        if len(invoke_list) < 1:
                            continue
                            
                        
                        if len(re.findall('\S+;->', lines)) == 0:
                            continue
                        lib = re.findall('\S+;->', lines)[0][:-3]
                        
                        name = re.findall('\S+;->\S+', lines)[0]
                        index = name.find('(')
                        name = name[:index] + '()'
                        dic['name'] = name
                        if name not in library_dic[lib]:
                            library_dic[lib].append(name)
                        temp_list.append(dic)
                       
                        block_dic[counter].add(name)
        final_dic_[app_name_] = temp_list
       
        
    return final_dic_, new_strorage_dic, library_dic

def save_structures(final_dic_,new_strorage_dic, library_dic,name_list):
    """
    Saves all the structures created in json files
    """
    if not os.path.isdir(name_list[0] + '/processed'):
        direc = name_list[0] + '/processed'
        os.mkdir(direc)
    path1 = name_list[0] + '/processed/' + name_list[1]
    path2 = name_list[0] + '/processed/' + name_list[2]
    path3 = name_list[0] + '/processed/' + name_list[3]
    with open(path1, 'w') as f:
        json.dump(final_dic_, f)
    with open(path2, 'w') as f:
        json.dump(new_strorage_dic, f)
    with open(path3, 'w') as f:
        json.dump(library_dic, f)


