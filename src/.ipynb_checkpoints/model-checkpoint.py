from scipy.sparse import *
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.svm import LinearSVC
from sklearn.metrics import *
import numpy as np
import json 

def aa_kernel(a):
    """
    creates the kernel A.A^T
    """
    return a.dot(a.T)

def ab_kernel(a,b):
    """
    Creates kernel ABA^T
    """
    return a.dot(b.dot(a.T))

def ap_kernel(a,p):
    """
    Creates kernel APA^T
    """
    return a.dot(p.dot(a.T))

def abp_kernel(a,b,p):
    """
    Creates kernel APBP^TA^T
    """
    return a.dot(p.dot(b.dot(p.T.dot(a.T))))


def create_df(kernel,malware_path, benign_paths, app_list):
    """
    Creates Dataframe from the kernal and adds the labels 
    """
    malware_apps  = [i.split('/')[-1] for i in  malware_path]
    benign_apps  = [i.split('/')[-1] for i in  benign_paths]
    kernel_df = pd.DataFrame(kernel.toarray())
    kernel_df['app_name'] = app_list
    kernel_df['type'] = kernel_df.app_name.apply(lambda x: 0 if x in malware_apps else 1)
 
    return kernel_df

def run_model(df, clf):
    """
    Runs the passed in model on the kernel converted into a dataframe 
    """
    X  = df.drop({'type','app_name'} , axis = 1)
    y = df['type']
    train_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.33, random_state=42)
    clf.fit(train_x, train_y)
    pred = clf.predict(test_x)
    dic_scores = {}
    dic_scores['accuracy'] = accuracy_score(test_y, pred)
    dic_scores['f1_score'] = f1_score(test_y, pred)
    dic_scores['tn'], dic_scores['fp'], dic_scores['fn'], dic_scores['tp'] = \
                                confusion_matrix(test_y, pred).ravel()


    return dic_scores




    